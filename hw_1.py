# task1
# print(17/2*3+2)
# print(2+17/2*3)
# print(19%4+15/2*3)
# print(15+6-10*4)
# print(17/2%2*3**3)

# task2
# print(17/2*(3+2))
# print((2+17)/2*3)
# print(19%(4+15)/2*3)
# print((15+6-10)*4)
# print(17/2%(2*(3**3)))

# task3
# print(11-3*1.5)

# task4
# Anna_Apple = 2
# Pol_Apple =5
# print(Anna_Apple+Pol_Apple)

# task5
# days = 2; hours = days*24; min = days*1440; sec = days*86400
# print("Days:",days,"Hours:",hours,"Minute:",min,"Second:",sec)

# task6
# days1 = 182
# week = 7
# print(days1//week)



# git init - создаём в текущем каталоге, новый подкаталог(.git)
# git clone - клонирование(копирование) репозитория на свой компьютер
# git add - добавляем новый файл в наш каталог, то есть начинаем отслеживать этот файл, либо же для индексации(подтверждения) изменений уже существоваших файлов в каталоге
# git commit - фиксирует(приминяет) все проиндексированные изменения.
# git push - выкладываем наш файл в удалённый репозиторий
# git pull - забираем(скачиваем) файл из удалённого репозитория
# git branch - создаёт новую ветку, но не переключает вас на неё
# git checkout - переход на новую или уже существующую ветку(git checkout name(ветки)
# git merge - слияние веток
# git rebase - перемещение ветки(не слияние!!!)
# git cherry-pick - перемещение определенного коммита(не ветки)
# git status - определяем в каком состоянии находятся файлы(отслеживаемые или изменённые), либо у нас чистый рабочий каталог
# git log - просмотреть историю коммитов(репозитория)
# git reset - отменяет коммит и оставляет изменённые файлы непроиндексированными
# git revert - отменяет изменения, но результат этой отмены мы увидим в следующих коммитах, т.е. наш код мы не потярем, он останется в предыдущих коммитах
# git stash - прячем изменённые отслеживаемые файлы и сохраняем в стек незавершённых изменений
# git diff - показывает, какие произошли изменение в файле, так же можно сравнить последние изменения с последним коммитом